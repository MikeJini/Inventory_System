pipeline {
    agent any

    environment {
        VERSION = "${BUILD_NUMBER}"

        BACKEND_CONTAINER_TEST_NAME = "inventory_backend_test"
        BACKEND_APP_NAME = "inventory_backend"
        BACKEND_IMAGE_NAME = "${BACKEND_APP_NAME}:${VERSION}"

        FRONTEND_CONTAINER_TEST_NAME = "inventory_frontend_test"
        FRONTEND_APP_NAME = "inventory_frontend"
        FRONTEND_IMAGE_NAME = "${FRONTEND_APP_NAME}:${VERSION}"

        DOCKERHUB_CRED = "docker-credentials"
        CHART_NAME = "inventory-chart"
        FRONTEND_PORT = 8000
        BACKEND_PORT = 8001
    }

    stages {
        stage('Build') {
            steps {
                echo "****** Building the app ******"
                script {
                    sh """
                    cd flask
                    docker build --tag ${env.BACKEND_IMAGE_NAME} .
                    cd .. 
                    cd frontend
                    docker build --tag ${env.FRONTEND_IMAGE_NAME} . 
                    """
                }    
            }
        }

        stage('Test') {
            steps {
                echo "****** Testing the app ******"
                script {
                    sh """
                    cd tests
                    docker compose up -d
                    sleep 30
                    python insert_vals.py 5000
                    docker compose down -v
                """
                }
            }
        }

        stage('Deploy') {
            steps {
                echo "******* Deploying a new version *******"
                script {
                    docker.withRegistry('', "${env.DOCKERHUB_CRED}") {
                    sh """
                    docker tag ${env.BACKEND_IMAGE_NAME} mikejini/${env.BACKEND_IMAGE_NAME}
                    docker push mikejini/${env.BACKEND_IMAGE_NAME}

                    docker tag ${env.FRONTEND_IMAGE_NAME} mikejini/${env.FRONTEND_IMAGE_NAME}
                    docker push mikejini/${env.FRONTEND_IMAGE_NAME}
                    """
                    }
                }    
            }
        }

        stage('Deploy Kubernetes') {
            steps {
                echo "******* Deploying our helm chart on K8S *******"
                script {
                    withCredentials([string(credentialsId: 'postgres_password', variable: 'PG_PASSWORD')]) {
                        sh """#!/bin/bash

                        export KUBECONFIG=/home/devops/.kube/config
                        echo $PG_PASSWORD

                        helm upgrade --install ${env.CHART_NAME} ./helmchart \
                        --set backend.deployment.image_tag=${env.VERSION} \
                        --set frontend.deployment.image_tag=${env.VERSION} \
                        --set backend.secret.password=$PG_PASSWORD \
                        --set postgres.secret.password=$PG_PASSWORD \
                        --set backend.host_port=${env.BACKEND_PORT} \
                        --set frontend.host_port=${env.FRONTEND_PORT}

                        kubectl port-forward --address=0.0.0.0 svc/react-service ${env.FRONTEND_PORT}:80 &
                        kubectl port-forward --address=0.0.0.0 svc/flask-service ${env.BACKEND_PORT}:80 &
                        """

                        
                    }
                }       
            }
        }

        stage('Test_Live') {
            steps {
                echo "****** Testing the app LIVE ******"
                script {
                    sh """
                    cd tests
                    sleep 30
                    python insert_vals.py ${env.BACKEND_PORT}
                """
                }
            }
        }
    
    }

    post {
        always {
            echo "Cleaning up.."
            sh """
            docker stop ${env.BACKEND_CONTAINER_TEST_NAME} || true
            docker stop ${env.FRONTEND_CONTAINER_TEST_NAME} || true
            docker rmi ${env.BACKEND_IMAGE_NAME} || true
            docker rmi ${env.FRONTEND_IMAGE_NAME} || true
            """
        }
    }
}

